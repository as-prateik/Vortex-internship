# -*- coding: utf-8 -*-
"""svm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mbIoR4VsijEwDUtAd6hr6olqd9eqhbbi
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('Mail_Customers.csv')

df.info()

df = df.rename(columns={"Genre": "Gender"})

df1 = pd.get_dummies(df["Gender"])
df = pd.concat((df, df1), axis=1)
df = df.drop(["Gender"], axis=1)
df = df.drop(["Male"], axis=1)
df = df.rename(columns={"Female": "Gender"})

df = df.rename(columns={"Genre": "Gender"})
df.info()

x = df[['Age','Annual Income (k$)','Spending Score (1-100)']]
y = df['Gender']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.1, random_state=2)

scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

svm_classifier = SVC(kernel='linear')
svm_classifier.fit(x_train, y_train)

y_pred = svm_classifier.predict(x_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

scaler = StandardScaler()
x_scaled = scaler.fit_transform(x)


svm_classifier = SVC(kernel='linear')
svm_classifier.fit(x_scaled[:, :2], y)

x_min, x_max = x_scaled[:, 0].min() - 1, x_scaled[:, 0].max() + 1
y_min, y_max = x_scaled[:, 1].min() - 1, x_scaled[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.1),
                     np.arange(y_min, y_max, 0.1))
Z = svm_classifier.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)
plt.contourf(xx, yy, Z, alpha=0.4)
plt.scatter(x_scaled[:, 0], x_scaled[:, 1], c=y, s=20, edgecolors='k')

plt.xlabel('Age (scaled)')
plt.ylabel('Salary (scaled)')
plt.title('SVM Decision Boundary Visualization')
plt.show()